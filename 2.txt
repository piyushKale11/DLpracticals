import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow import keras
import random

mnist = tf.keras.datasets.mnist
(x_train,y_train),(x_test,y_test)=mnist.load_data()

x_train=x_train/255
x_test=x_test/255

model=keras.Sequential([
    keras.layers.Flatten(input_shape=(28,28)),
    keras.layers.Dense(128,activation="relu"),
    keras.layers.Dense(10,activation="softmax")
    ])

model.summary()


model.compile(optimizer="sgd",
              loss="sparse_categorical_crossentropy",
              metrics=["accuracy"])

history=model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=3)

test_loss,test_acc=model.evaluate(x_test,y_test)
print(f"Loss:{test_loss}")
print(f"Accuracy:{test_acc}")

n=random.randint(0,9999)
plt.imshow(x_test[n])
plt.show()

plt.plot(history.history["accuracy"])
plt.plot(history.history["val_accuracy"])
plt.title("Model Accuracy")
plt.ylabel("Accuracy")
plt.xlabel("Epochs")
plt.legend(["Train","Validation"],loc="upper right")
plt.show()

plt.plot(history.history["loss"])
plt.plot(history.history["val_loss"])
plt.title("Model loss")
plt.ylabel("Loss")
plt.xlabel("Epochs")
plt.legend(["Train","Validation"],loc="upper right")
plt.show()